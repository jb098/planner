"""Update from stable to current 10/02/2015

Revision ID: 56f566cdf263
Revises:
Create Date: 2015-02-10 15:34:43.673057

"""

# revision identifiers, used by Alembic.
revision = '56f566cdf263'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import sessionmaker, Session, relationship
from planner.model import Engagement, EngagementStatus, EngagementSustainability,
    EngagementAlignment, EngagementComplexity, EngagementProbability

s = sessionmaker()

def upgrade():
    bind = op.get_bind()
    session = s(bind=bind)

    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('EngagementStatus',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('EngagementSustainability',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('value')
    )
    op.create_table('EngagementAlignment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('value')
    )
    op.create_table('Contact',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('forename', sa.Text(), nullable=False),
    sa.Column('surname', sa.Text(), nullable=False),
    sa.Column('role', sa.Text(), nullable=True),
    sa.Column('email', sa.Text(), nullable=True),
    sa.Column('landlinenumber', sa.Text(), nullable=True),
    sa.Column('mobilenumber', sa.Text(), nullable=True),
    sa.Column('postcode', sa.Text(), nullable=True),
    sa.Column('streetname', sa.Text(), nullable=True),
    sa.Column('streetnumber', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('EngagementComplexity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('guide_revenue', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('value')
    )
    op.create_table('EngagementProbability',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('value')
    )
    op.create_table('Client',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('contactid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['contactid'], ['Contact.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('TeamCost',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Integer(), nullable=False),
    sa.Column('iterationid', sa.Integer(), nullable=False),
    sa.Column('teamid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['iterationid'], ['Iteration.id'], ),
    sa.ForeignKeyConstraint(['teamid'], ['Team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('TeamIterationCost',
    sa.Column('teamid', sa.Integer(), nullable=True),
    sa.Column('teamcostid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['teamcostid'], ['TeamCost.id'], ),
    sa.ForeignKeyConstraint(['teamid'], ['Team.id'], )
    )
    op.drop_table('FreeEngagementIteration')
    op.add_column(u'Engagement', sa.Column('alignmentid', sa.Integer(), nullable=True))
    op.add_column(u'Engagement', sa.Column('backlog', sa.Text(), nullable=True))
    op.add_column(u'Engagement', sa.Column('clientid', sa.Integer(), nullable=True))
    op.add_column(u'Engagement', sa.Column('complexityid', sa.Integer(), nullable=True))
    op.add_column(u'Engagement', sa.Column('probabilityid', sa.Integer(), nullable=True))
    op.add_column(u'Engagement', sa.Column('proposal', sa.Text(), nullable=True))
    op.add_column(u'Engagement', sa.Column('statusid', sa.Integer(), nullable=True))
    op.add_column(u'Engagement', sa.Column('sustainabilityid', sa.Integer(), nullable=True))
    op.alter_column(u'Engagement', 'isrnd',
               existing_type=sa.BOOLEAN(),
               nullable=True)

    ## Jordan: Must move data from one table to new one manually
    for status in ['Lost', 'Approach', 'Negotiation', 'Sold', 'Complete']:
        session.add(EngagementStatus(name=status))
    for value, name in [(0.0, 'Certainly Unaligned'),
                        (0.1, 'Almost Certainly Unaligned'),
                        (0.2, 'Largely Unaligned'),
                        (0.3, 'Probably Unaligned'),
                        (0.4, 'Generally Unaligned'),
                        (0.5, 'Unsure'),
                        (0.6, 'Generally Aligned'),
                        (0.7, 'Probably Aligned'),
                        (0.8, 'Largely Aligned'),
                        (0.9, 'Almost Certainly Aligned'),
                        (1.0, 'Certainly Aligned')]:
        session.add(EngagementAlignment(value=value, name=name))
    for value, name in [(0.0, 'Impossible to Sustain'),
                        (0.1, 'Almost Impossible to Sustain'),
                        (0.2, 'Very Challenging to Sustain'),
                        (0.3, 'Challenging to Sustain'),
                        (0.4, 'Generally Unsustainable'),
                        (0.5, 'Unsure'),
                        (0.6, 'Generally Sustainable'),
                        (0.7, 'Easy to Sustain'),
                        (0.8, 'Very Easy to Sustain'),
                        (0.9, 'Almost Certain to Sustain'),
                        (1.0, 'Certain to Sustain')]:
        session.add(EngagementSustainability(name=name, value=value))
    for value, name in [(0.0, 'Lost'),
                        (0.1, 'Almost Lost'),
                        (0.2, 'Very Probably Lost'),
                        (0.3, 'Probably Lost'),
                        (0.4, 'Possibly Lost'),
                        (0.5, 'Unsure'),
                        (0.6, 'Possibly Won'),
                        (0.7, 'Probably Won'),
                        (0.8, 'Very Probably Won'),
                        (0.9, 'Almost Certainly Won'),
                        (1.0, 'Won')]:
        session.add(EngagementProbability(name=name, value=value))
    for value, name in [(0.1, 'Tiny'),
                        (0.5, 'Small'),
                        (1.0, 'Medium'),
                        (2.0, 'Large')]:
        session.add(EngagementComplexity(name=name, value=value))

    session.commit()
    ##

    op.create_foreign_key(None, 'Engagement', 'EngagementAlignment', ['alignmentid'], ['id'])
    op.create_foreign_key(None, 'Engagement', 'EngagementComplexity', ['complexityid'], ['id'])
    op.create_foreign_key(None, 'Engagement', 'EngagementSustainability', ['sustainabilityid'], ['id'])
    op.create_foreign_key(None, 'Engagement', 'Client', ['clientid'], ['id'])
    op.create_foreign_key(None, 'Engagement', 'EngagementProbability', ['probabilityid'], ['id'])
    op.create_foreign_key(None, 'Engagement', 'EngagementStatus', ['statusid'], ['id'])
    op.drop_column(u'Engagement', 'status')
    op.drop_column(u'Engagement', 'probability')
    op.drop_column(u'Engagement', 'sustainability')
    op.drop_column(u'Engagement', 'complexity')
    op.drop_column(u'Engagement', 'client')
    op.drop_column(u'Engagement', 'sowlink')
    op.drop_column(u'Engagement', 'alignment')
    op.drop_column(u'Team', 'cost')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column(u'Team', sa.Column('cost', sa.INTEGER(), nullable=False))
    op.add_column(u'Engagement', sa.Column('alignment', sa.VARCHAR(length=3), nullable=False))
    op.add_column(u'Engagement', sa.Column('sowlink', sa.TEXT(), nullable=False))
    op.add_column(u'Engagement', sa.Column('client', sa.TEXT(), nullable=False))
    op.add_column(u'Engagement', sa.Column('complexity', sa.VARCHAR(length=3), nullable=False))
    op.add_column(u'Engagement', sa.Column('sustainability', sa.VARCHAR(length=3), nullable=False))
    op.add_column(u'Engagement', sa.Column('probability', sa.VARCHAR(length=3), nullable=False))
    op.add_column(u'Engagement', sa.Column('status', sa.VARCHAR(length=11), nullable=False))
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.drop_constraint(None, 'Engagement', type_='foreignkey')
    op.alter_column(u'Engagement', 'isrnd',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_column(u'Engagement', 'sustainabilityid')
    op.drop_column(u'Engagement', 'statusid')
    op.drop_column(u'Engagement', 'proposal')
    op.drop_column(u'Engagement', 'probabilityid')
    op.drop_column(u'Engagement', 'complexityid')
    op.drop_column(u'Engagement', 'clientid')
    op.drop_column(u'Engagement', 'backlog')
    op.drop_column(u'Engagement', 'alignmentid')
    op.create_table('FreeEngagementIteration',
    sa.Column('engagementid', sa.INTEGER(), nullable=True),
    sa.Column('iterationid', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['engagementid'], [u'Engagement.id'], ),
    sa.ForeignKeyConstraint(['iterationid'], [u'Iteration.id'], )
    )
    op.drop_table('TeamIterationCost')
    op.drop_table('TeamCost')
    op.drop_table('Client')
    op.drop_table('EngagementProbability')
    op.drop_table('EngagementComplexity')
    op.drop_table('Contact')
    op.drop_table('EngagementAlignment')
    op.drop_table('EngagementSustainability')
    op.drop_table('EngagementStatus')
    ### end Alembic commands ###
